# 공통
server:
  port: 8080
  tomcat:
    threads:
      max: 16
      min-spare: 16
spring:
  profiles:
    active: "local"
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME:todak}
    password: ${MAIL_PASSWORD:todak}
    properties:
      mail:
        smtp:
          auth: true
          timeout: 5000
          starttls:
            enable: true
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
jwt:
  secret-key: ${JWT_SECRET_KEY:abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijkl}
  access-expire-time: ${ACCESS_EXPIRE_TIME:123456}
  refresh-expire-time: ${REFRESH_EXPIRE_TIME:12345678}
aws:
  region: ${AWS_REGION:region}
  access-key: ${AWS_ACCESS_KEY:access}
  secret-key: ${AWS_SECRET_KEY:secret}
  s3:
    bucket-name: ${AWS_S3_BUCKET_NAME:bucket}
    presign-duration: ${AWS_S3_PRESIGN_DURATION:1}
    default-key:
      character: ${AWS_S3_DEFAULT_CHARACTER_IMAGE_KEY:default-character}
      webtoon: ${AWS_S3_DEFAULT_WEBTOON_IMAGE_KEY:default-webtoon}
      bgm: ${AWS_S3_DEFAULT_BGM_IMAGE_KEY:default-bgm}
client:
  server:
    origin: ${CLIENT_SERVER_ORIGIN:http://localhost:1234}
#logging:
#  level:
#    com:
#      zaxxer.hikari.HikariConfig: DEBUG
#      zaxxer.hikari: DEBUG
#    org.springframework.security: trace
---
spring:
  datasource:
#    hikari:
#      maximum-pool-size: 20
    driver-class-name: org.postgresql.Driver
    url: ${POSTGRESQL_URL}
    username: ${POSTGRESQL_USER}
    password: ${POSTGRESQL_PASSWORD}
  security:
    oauth2:
      client:
        registration:
          google:
            client-name: google
            client-id: ${GOOGLE_OAUTH_CLIENT_ID}
            client-secret: ${GOOGLE_OAUTH_CLIENT_SECRET}
            redirect-uri: ${GOOGLE_OAUTH_REDIRECT_URI}
            authorization-grant-type: authorization_code
            scope:
              - email
          naver:
            client-name: naver
            client-id: ${NAVER_OAUTH_CLIENT_ID}
            client-secret: ${NAVER_OAUTH_CLIENT_SECRET}
            redirect-uri: ${NAVER_OAUTH_REDIRECT_URI}
            authorization-grant-type: authorization_code
            scope:
              - email
          kakao:
            client-name: kakao
            client-id: ${KAKAO_OAUTH_CLIENT_ID}
            client-secret: ${KAKAO_OAUTH_CLIENT_SECRET}
            redirect-uri: ${KAKAO_OAUTH_REDIRECT_URI}
            authorization-grant-type: authorization_code
            scope:
              - account_email
            client-authentication-method: client_secret_post
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  config:
    activate:
      on-profile: "local"
    import: optional:file:todak.properties
ai:
  server:
    url:
      image-domain: ${AI_SERVER_IMAGE_URL_DOMAIN:ai-domain}
      text-domain: ${AI_SERVER_TEXT_URL_DOMAIN:ai-domain}
      bgm-domain: ${AI_SERVER_BGM_URL_DOMAIN:ai-domain}
---
spring:
  config:
    activate:
      on-profile: "test"
  jpa:
    hibernate:
      ddl-auto: create-drop
  h2:
    console:
      enabled: true
ai:
  server:
    url:
      image-domain: ${AI_SERVER_IMAGE_URL_DOMAIN:ai-domain}
      text-domain: ${AI_SERVER_TEXT_URL_DOMAIN:ai-domain}
      bgm-domain: ${AI_SERVER_BGM_URL_DOMAIN:ai-domain}
